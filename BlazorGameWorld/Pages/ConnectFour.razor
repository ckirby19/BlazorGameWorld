@page "/connectfour"
@using Microsoft.AspNetCore.SignalR.Client
@inject BlazorGameWorld.Shared.ConnectFourGameState State
@using System.Drawing
@inject NavigationManager NavigationManager
@implements IDisposable
@inject IJSRuntime JSRuntime

<HeadContent>
	<style>
		:root {
			--board-bg: @ColorTranslator.ToHtml(BoardColor);
			--player1: @ColorTranslator.ToHtml(Player1Color);
			--player2: @ColorTranslator.ToHtml(Player2Color);
		}
	</style>
</HeadContent>

@if (!_isFullRoom)
{
	@if (!_isLogin){
		<div class="form-group">
			<label>
				Username: <input @bind="_userName" @ref=ReferenceToLoginControl/>
			</label>
			<button @onclick="LogInUser" disabled="@(!IsConnected)">Login</button>
		</div>
	}
	else if(_isWaiting){
		<div class="waiting">
			<h2><b>Username: @_userName</b> </h2>
			<h2>Waiting for opponent...</h2>
		</div>
	}
}
else
{
	<!-- Display the game -->
	<article>
		@WinnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
		<br />
		<span class="alert-danger">@ErrorMessage</span>
		<span class="alert-info">@CurrentTurn</span>
	</article>

	<div>
		<label>
			<h2><b>@_userName</b> you are now playing <b>@_otherUser</b></h2>
		</label>
		@if (_isUsersTurn)
		{
			<h2><b>Your turn, please click a column to play a piece</b></h2>
		}
		else
		{
			<h2><b>Other users turn, please wait...</b></h2>
		}
	</div>

	<nav>
		<!--
		We can't use a for loop for this, as we are defining an onclick handler for these span elements that has an assigned column number.
		at character in front of onclick means C# will handle the click events, and we can use custom method
		-->
		<span title="Click to play a piece" @onclick="() => PlayPiece(1)">🔽</span>
		<span title="Click to play a piece" @onclick="() => PlayPiece(2)">🔽</span>
		<span title="Click to play a piece" @onclick="() => PlayPiece(3)">🔽</span>
		<span title="Click to play a piece" @onclick="() => PlayPiece(4)">🔽</span>
		<span title="Click to play a piece" @onclick="() => PlayPiece(5)">🔽</span>
		<span title="Click to play a piece" @onclick="() => PlayPiece(6)">🔽</span>
		<span title="Click to play a piece" @onclick="() => PlayPiece(7)">🔽</span>
	</nav>

	<div>
		<div class="board">
			@for (var i = 0; i < numContainers; i++)
			{
				<span class="container">
					<span></span>
				</span>
			}
		</div>
		@for (var i = 0; i < 42; i++)
		{
			<span class="@Pieces[i]"></span>
		}
	</div>
}




@code {
	// Need to transform all of this to use a hub and do hubconnection.on
	int numContainers = 42;
	private string[] Pieces = new string[42];

	public Color BoardColor = ColorTranslator.FromHtml("yellow");

	public Color Player1Color = ColorTranslator.FromHtml("red");

	public Color Player2Color = ColorTranslator.FromHtml("blue");

	private bool _isFullRoom = false;
	ElementReference ReferenceToLoginControl;
	private HubConnection _hubConnection;
	private List<string> _messages = new List<string>();
	private string _userName;
	private string _otherUser;
	private string _connectionId;
	private bool _isWaiting = false;
	private bool _isLogin = false;
	private bool _isUsersTurn = false;
	private int _playerNumber;

	protected override async Task OnInitializedAsync()
	{
		_hubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri("/connectfourhub"))
			.Build();

		//_hubConnection.On<string>("SendUserInformation", async (otherConnectionID) =>
		//{ 
		//	await _hubConnection.SendAsync("SendUserInformation", _userName, otherConnectionID);  
		//}); 
		//_hubConnection.On<string>("GetConnectionId", async (hubConnectionId,hubOtherUser) =>
		//{
		//	await JSRuntime.InvokeAsync<object>("console.log", "ConnectionID :" + hubConnectionId);

		//	await _hubConnection.SendAsync("SendUserInformation", _userName, otherConnectionID);
		//	_connectionId = hubConnectionId;
		//	_otherUser = hubOtherUser;
		//	this.InvokeAsync(() => this.StateHasChanged());
		//});
		//_hubConnection.On("ComeBackLater", async () =>
		//{ 
		//	_isFullRoom = true;
		//	await JSRuntime.InvokeVoidAsync("applyStyleForElement",
		//		new { id = "blazorBody", attrib = "background-image", value = "url('../Images/wall31.jpeg')" });
                  
		//	this.InvokeAsync(() => this.StateHasChanged());;              
		//});
		//_hubConnection.On<string,int,string>("GetUserInformation", async (otherUserName,_connectionID) =>
		//{ 
		//	await JSRuntime.InvokeAsync<object>("console.log", "ConnectionID :" + _connectionID);
		//	_connectionID=_connectionID;
		//	if (_otherUserN != null && IsRenderUI == true)
		//	{
		//		_otherUser=otherUserName;
		//		this.InvokeAsync(() => this.StateHasChanged());;
		//	}
		//});
		//_hubConnection.On("RefreshGame", async () =>
		//{
		//	ResetGame();
		//});
		//_hubConnection.On<string, string, int>("ReceiveMove", (userName, connectionId) =>
		//{
		//	if (userName != _userName)
		//	{
		//		_otherUser = _userName;
		//		_otherMoney = _money;
		//	}
		//	else
		//	{
		//		isLogin = true;
		//	}
		//	this.InvokeAsync(() => this.StateHasChanged());
		//});
		_hubConnection.On<string, string>("ReceiveUser", (userName, connectionId) =>
		{
			JSRuntime.InvokeVoidAsync("alert", $"User {userName} with connection id {connectionId} has joined!");
			//this.InvokeAsync(() => this.StateHasChanged());
		});

		_hubConnection.On<string>("Registered", (userName) =>
		{
			_isLogin = true;
			_userName = userName;
			_hubConnection.SendAsync("FindOpponent");
		});
		_hubConnection.On("WaitForOpponent", () =>
		{
			_isWaiting = true;
		});

		_hubConnection.On<string,int>("FoundOpponent", (otherUserName,playerNumber) =>
		{
			_isWaiting = false;
			_otherUser = otherUserName;
			_isFullRoom = true;
			_playerNumber = playerNumber;
			if (_playerNumber == 1)
			{
				_isUsersTurn = true;
			}
			this.InvokeAsync(() => this.StateHasChanged());
		});
		//_hubConnection.On<int, string, string, int>("ReceiveOpen", async (counter, imgId, lblId, _money) =>
		//{
		//	_otherMoney = _money;
		//	this.InvokeAsync(() => this.StateHasChanged());
		//	await Open(counter, imgId, lblId, true);
		//});
		//_hubConnection.On<string, string>("RemoveUser", (_userName, _connectionId) =>
		//{
		//	if (userName != _userName)
		//	{
		//		_otherUser = null;
		//		_otherMoney = 0;
		//		@* word = ""; *@
		//		word = null;
		//		this.InvokeAsync(() => this.StateHasChanged());
		//	}
		//});

		await _hubConnection.StartAsync();
	}

	Task LogInUser()
		=>_hubConnection.SendAsync("RegisterClient", _userName);

	//async Task Answer()
	//{
	//	int totalEarnMoney = 0;
	//	if (answer.ToUpper() == word.ToUpper())
	//	{
	//		globalScore++;
	//		for (int i = 0; i < word.Length; i++)
	//		{
	//			bool result = await JSRuntime.InvokeAsync<bool>("getStyleForElement",
	//							new { id = "label-" + @i, attrib = "display" });
	//			if (word[i] != ' ' && !result)
	//			{
	//				money += 10;
	//				totalEarnMoney += 10;
	//			}
	//			if (word[i] != ' ')
	//			{
	//				string imgId = "image-" + @i;
	//				string lblId = "label-" + @i;

	//				await JSRuntime.InvokeVoidAsync("applyStyleForElement",
	//												new { id = imgId, attrib = "display", value = "none" });

	//				await JSRuntime.InvokeVoidAsync("applyStyleForElement",
	//												new { id = lblId, attrib = "display", value = "inline" },
	//												new { id = lblId, attrib = "font-size", value = "65px" });
	//			}
	//		}
	//		await _hubConnection.SendAsync("sendAnswer", userName, connectionID, money);
	//		System.Threading.Thread.Sleep(1000);

	//		await JSRuntime.InvokeAsync<object>("alert", "Winner :" + userName + "\n Total Reward :" + totalEarnMoney + "₺");

	//		await _hubConnection.SendAsync("Refresh");
	//	}
	//}

	public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

	public void Dispose()
	{
		_ = _hubConnection.DisposeAsync();
	}
	//private async Task Open(int counter, string imgId, string lblId, bool isOtherOpen = false)
	//{
	//	if (isOtherOpen == false && money >= 10)
	//	{
	//		await JSRuntime.InvokeVoidAsync("applyStyleForElement",
	//		new { id = imgId, attrib = "display", value = "none" });

	//		await JSRuntime.InvokeVoidAsync("applyStyleForElement",
	//			new { id = lblId, attrib = "display", value = "inline" },
	//			new { id = lblId, attrib = "font-size", value = "65px" });

	//		await _hubConnection.SendAsync("OpenClient", counter, imgId, lblId);
	//	}
	//	else if (isOtherOpen == true)
	//	{
	//		await JSRuntime.InvokeVoidAsync("applyStyleForElement",
	//	new { id = imgId, attrib = "display", value = "none" });

	//		await JSRuntime.InvokeVoidAsync("applyStyleForElement",
	//			new { id = lblId, attrib = "display", value = "inline" },
	//			new { id = lblId, attrib = "font-size", value = "65px" });
	//	}
	//}

	//bool IsRenderUI = false;
	//protected override void OnAfterRender(bool firstRender)
	//{
	//	IsRenderUI = true;
	//}
	//protected override async Task OnAfterRenderAsync(bool firstRender)
	//{
	//	if (firstRender)
	//		await JSRuntime.InvokeVoidAsync("FocusScript.setFocus", ReferenceToLoginControl);
	//}


	protected override void OnInitialized()
	{
		State.ResetBoard();
	}
	private void PlayPiece(byte col)
	{
		ErrorMessage = string.Empty;

		// Play piece only if it is users turn
		
		if (_isUsersTurn)
		{
			try
			{
				var landingRow = State.PlayPiece(col);
				var cssClass = $"player{State.PlayerTurn} col{col} drop{landingRow}";
				Pieces[State.CurrentTurn - 1] = cssClass;
			}
			catch (ArgumentException ex)
			{
				ErrorMessage = ex.Message;
			}

			WinnerMessage = State.CheckForWin() switch
			{
				ConnectFourGameState.WinState.Player1_Wins => "Player 1 Wins!",
				ConnectFourGameState.WinState.Player2_Wins => "Player 2 Wins!",
				ConnectFourGameState.WinState.Tie => "It's a tie!",
				_ => ""
				};
		}
		_isUsersTurn = _playerNumber == State.PlayerTurn ? true : false;

	}
	void ResetGame()
	{
		State.ResetBoard();
		WinnerMessage = string.Empty;
		ErrorMessage = string.Empty;
		Pieces = new string[42];
	}

	private string WinnerMessage = string.Empty;

	private string ErrorMessage = string.Empty;

	private string CurrentTurn => (WinnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";

	private string ResetStyle => (WinnerMessage == string.Empty) ? "display: none;" : "";
}